using DataAccess.IRepository;
using DataAccess.Service;
using Moq;
using WinUiApp.Data.Data;


namespace WinUIApp.Tests.UnitTests.Services.TwoFactorAuthenticationServiceTests
{
    public class Get2FAValuesTest
    {
        private readonly Mock<IUserRepository> mockUserRepository;
        private readonly TwoFactorAuthenticationService service;
        private readonly Guid testUserId = Guid.NewGuid();

        public Get2FAValuesTest()
        {
            mockUserRepository = new Mock<IUserRepository>();
            service = new TwoFactorAuthenticationService(mockUserRepository.Object);
            service.UserId = testUserId;
        }

        [Fact]
        public async Task Get2FAValues_FirstTimeSetup_GeneratesSecretAndReturnsUri()
        {
            // Arrange
            var user = new User
            {
                UserId = testUserId,
                Username = "testuser",
                TwoFASecret = null
            };
            service.IsFirstTimeSetup = true;

            mockUserRepository.Setup(repo => repo.GetUserById(testUserId)).ReturnsAsync(user);
            mockUserRepository.Setup(repo => repo.UpdateUser(It.IsAny<User>())).ReturnsAsync(true);

            // Act
            var result = await service.Get2FAValues();

            // Assert
            Assert.NotNull(result.currentUser);
            Assert.NotEmpty(result.uniformResourceIdentifier);
            Assert.NotNull(result.twoFactorSecret);
            Assert.NotEmpty(result.twoFactorSecret);

            // Confirm that TwoFASecret was set on user as a base64 string matching the generated bytes
            var secretFromUser = Convert.FromBase64String(result.currentUser.TwoFASecret);
            Assert.Equal(secretFromUser, result.twoFactorSecret);

            mockUserRepository.Verify(repo => repo.GetUserById(testUserId), Times.Once);
            mockUserRepository.Verify(repo => repo.UpdateUser(It.Is<User>(u => u == user)), Times.Once);
        }

        [Fact]
        public async Task Get2FAValues_NotFirstTimeSetup_ReturnsExistingSecret()
        {
            // Arrange
            var secretBytes = new byte[] { 1, 2, 3, 4, 5 };
            var base64Secret = Convert.ToBase64String(secretBytes);

            var user = new User
            {
                UserId = testUserId,
                Username = "testuser",
                TwoFASecret = base64Secret
            };
            service.IsFirstTimeSetup = false;

            mockUserRepository.Setup(repo => repo.GetUserById(testUserId)).ReturnsAsync(user);

            // Act
            var result = await service.Get2FAValues();

            // Assert
            Assert.NotNull(result.currentUser);
            Assert.Empty(result.uniformResourceIdentifier); // URI is empty on subsequent setups
            Assert.Equal(secretBytes, result.twoFactorSecret);

            mockUserRepository.Verify(repo => repo.GetUserById(testUserId), Times.Once);
            mockUserRepository.Verify(repo => repo.UpdateUser(It.IsAny<User>()), Times.Never);
        }

        [Fact]
        public async Task Get2FAValues_UserNotFound_ReturnsEmptyTuple()
        {
            // Arrange
            mockUserRepository.Setup(repo => repo.GetUserById(testUserId)).ReturnsAsync((User?)null);

            // Act
            var result = await service.Get2FAValues();

            // Assert
            Assert.Null(result.currentUser);
            Assert.Equal(string.Empty, result.uniformResourceIdentifier);
            Assert.Empty(result.twoFactorSecret);

            mockUserRepository.Verify(repo => repo.GetUserById(testUserId), Times.Once);
        }

        [Fact]
        public async Task Get2FAValues_GenerationFails_ReturnsEmptyTuple()
        {
            // Arrange
            // Replace keyGeneration with a failing mock via reflection (since it's private readonly)
            var user = new User
            {
                UserId = testUserId,
                Username = "testuser",
                TwoFASecret = null
            };
            service.IsFirstTimeSetup = true;

            mockUserRepository.Setup(repo => repo.GetUserById(testUserId)).ReturnsAsync(user);

            // Force keyGeneration to null to simulate failure - this requires reflection because it's private
            var keyGenField = typeof(TwoFactorAuthenticationService).GetField("keyGeneration", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            keyGenField.SetValue(service, null);

            // Act
            var result = await service.Get2FAValues();

            // Assert
            Assert.Null(result.currentUser);
            Assert.Equal(string.Empty, result.uniformResourceIdentifier);
            Assert.Empty(result.twoFactorSecret);

            mockUserRepository.Verify(repo => repo.GetUserById(testUserId), Times.Once);
        }
    }
}
