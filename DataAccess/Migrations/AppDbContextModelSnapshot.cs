// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WinUiApp.Data;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Data.DrinkModificationRequest", b =>
                {
                    b.Property<int>("DrinkModificationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrinkModificationRequestId"));

                    b.Property<int>("ModificationType")
                        .HasColumnType("int");

                    b.Property<int?>("NewDrinkId")
                        .HasColumnType("int");

                    b.Property<int?>("OldDrinkId")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DrinkModificationRequestId");

                    b.HasIndex("NewDrinkId");

                    b.HasIndex("OldDrinkId");

                    b.HasIndex("RequestingUserId");

                    b.ToTable("DrinkModificationRequests");
                });

            modelBuilder.Entity("DataAccess.Model.AdminDashboard.OffensiveWord", b =>
                {
                    b.Property<int>("OffensiveWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffensiveWordId"));

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OffensiveWordId");

                    b.ToTable("OffensiveWords");
                });

            modelBuilder.Entity("DataAccess.Model.AdminDashboard.Role", b =>
                {
                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RoleType");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleType = 0,
                            RoleName = "Banned"
                        },
                        new
                        {
                            RoleType = 1,
                            RoleName = "User"
                        },
                        new
                        {
                            RoleType = 2,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("DataAccess.Model.AdminDashboard.UpgradeRequest", b =>
                {
                    b.Property<int>("UpgradeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpgradeRequestId"));

                    b.Property<string>("RequestingUserDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestingUserIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UpgradeRequestId");

                    b.HasIndex("RequestingUserIdentifier");

                    b.ToTable("UpgradeRequests");
                });

            modelBuilder.Entity("DataAccess.Model.Authentication.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Sunbrew Co."
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Berry Spirits"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Mocktails Inc."
                        });
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Ale"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Vodka"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Soft Drink"
                        });
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Drink", b =>
                {
                    b.Property<int>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrinkId"));

                    b.Property<decimal>("AlcoholContent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DrinkURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequestingApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("DrinkId");

                    b.HasIndex("BrandId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            DrinkId = 1,
                            AlcoholContent = 5.2m,
                            BrandId = 1,
                            DrinkName = "Golden Ale",
                            DrinkURL = "https://example.com/drinks/golden-ale.jpg"
                        },
                        new
                        {
                            DrinkId = 2,
                            AlcoholContent = 37.5m,
                            BrandId = 2,
                            DrinkName = "Cherry Vodka",
                            DrinkURL = "https://example.com/drinks/cherry-vodka.jpg"
                        },
                        new
                        {
                            DrinkId = 3,
                            AlcoholContent = 0.0m,
                            BrandId = 3,
                            DrinkName = "Ginger Beer",
                            DrinkURL = "https://example.com/drinks/ginger-beer.jpg"
                        });
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkCategory", b =>
                {
                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("DrinkId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("DrinkCategories");

                    b.HasData(
                        new
                        {
                            DrinkId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            DrinkId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            DrinkId = 3,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkOfTheDay", b =>
                {
                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DrinkTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DrinkId");

                    b.ToTable("DrinkOfTheDays");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFlags")
                        .HasColumnType("int");

                    b.Property<double?>("RatingValue")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UserId", "DrinkId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Content = "Great taste, smooth and refreshing.",
                            CreatedDate = new DateTime(2024, 12, 20, 10, 30, 0, 0, DateTimeKind.Utc),
                            DrinkId = 1,
                            IsActive = (byte)1,
                            IsHidden = false,
                            NumberOfFlags = 0,
                            RatingValue = 4.5,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            ReviewId = 2,
                            Content = "Too bitter for my preference.",
                            CreatedDate = new DateTime(2024, 12, 20, 10, 30, 0, 0, DateTimeKind.Utc),
                            DrinkId = 2,
                            IsActive = (byte)1,
                            IsHidden = false,
                            NumberOfFlags = 1,
                            RatingValue = 3.0,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("WinUiApp.Data.Data.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssignedRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasSubmittedAppeal")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDeletedReviews")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoFASecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            AssignedRole = 1,
                            EmailAddress = "john.doe@example.com",
                            HasSubmittedAppeal = false,
                            NumberOfDeletedReviews = 0,
                            PasswordHash = "$2a$11$K2xKJ9.vF8wHqJ4bK9mZXeJ8vKlM3nO2pQ7rS9tU1vW3xY4zA5bC6",
                            Username = "john_doe"
                        },
                        new
                        {
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            AssignedRole = 1,
                            EmailAddress = "jane.smith@example.com",
                            HasSubmittedAppeal = false,
                            NumberOfDeletedReviews = 1,
                            PasswordHash = "$2a$11$L3yLK0.wG9xIrK5cL0nAYfK9wLmN4oP3qR8sT0uV2wX4yZ5aB6dD7",
                            Username = "jane_smith"
                        });
                });

            modelBuilder.Entity("WinUiApp.Data.Data.UserDrink", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int?>("DrinkId1")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("DrinkId1");

                    b.HasIndex("UserId1");

                    b.ToTable("UserDrinks");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int?>("DrinkId1")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VoteId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("DrinkId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("DataAccess.Data.DrinkModificationRequest", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "NewDrink")
                        .WithMany()
                        .HasForeignKey("NewDrinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WinUiApp.Data.Data.Drink", "OldDrink")
                        .WithMany()
                        .HasForeignKey("OldDrinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WinUiApp.Data.Data.User", "RequestingUser")
                        .WithMany()
                        .HasForeignKey("RequestingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewDrink");

                    b.Navigation("OldDrink");

                    b.Navigation("RequestingUser");
                });

            modelBuilder.Entity("DataAccess.Model.AdminDashboard.UpgradeRequest", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.User", null)
                        .WithMany()
                        .HasForeignKey("RequestingUserIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Model.Authentication.Session", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Drink", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkCategory", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Category", "Category")
                        .WithMany("DrinkCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany("DrinkCategories")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.DrinkOfTheDay", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Review", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.UserDrink", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.Drink", null)
                        .WithMany("UserDrinks")
                        .HasForeignKey("DrinkId1");

                    b.HasOne("WinUiApp.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.User", null)
                        .WithMany("UserDrinks")
                        .HasForeignKey("UserId1");

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Vote", b =>
                {
                    b.HasOne("WinUiApp.Data.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.Drink", null)
                        .WithMany("Votes")
                        .HasForeignKey("DrinkId1");

                    b.HasOne("WinUiApp.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinUiApp.Data.Data.User", null)
                        .WithMany("Votes")
                        .HasForeignKey("UserId1");

                    b.Navigation("Drink");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Category", b =>
                {
                    b.Navigation("DrinkCategories");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.Drink", b =>
                {
                    b.Navigation("DrinkCategories");

                    b.Navigation("UserDrinks");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("WinUiApp.Data.Data.User", b =>
                {
                    b.Navigation("UserDrinks");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
