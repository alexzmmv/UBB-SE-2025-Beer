@{
    ViewData["Title"] = "Home Page";
}
@using Azure.Core
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WinUIApp.WebUI.Models.HomeViewModel

<div class="hero-section">
    <div class="container">
        <h1 class="mb-3">Discover Your Perfect Drink</h1>
        <p class="lead text-muted mb-0">Explore, rate and review the world's finest beverages</p>
    </div>
</div>

<div class="container-fluid app-container">
        <div class="row">
       <div class="col-lg-3 mb-4">
        <form asp-action="Index" method="get" class="filter-sidebar">
            <h3>
                <i class="bi bi-funnel me-2"></i>
                Filter Drinks
            </h3>
            
            <div class="mb-4">
                <div class="input-group">
                    <span class="input-group-text bg-transparent border-end-0">
                        <i class="bi bi-search"></i>
                    </span>
                    <input name="searchKeyword" type="search" class="form-control border-start-0" 
                           placeholder="Search drinks..." aria-label="Search" 
                           value="@Model.SearchKeyword">
                </div>
            </div>
            
            <div class="filter-section">
                <label class="fw-semibold">
                    <i class="bi bi-tags me-2"></i>
                    Categories
                </label>
                <div id="checkboxListCategories" class="checkbox-list">
                    @foreach (var category in Model.drinkCategories)
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="SelectedCategories" 
                                   value="@category.CategoryName" 
                                   id="cat-@category.CategoryName.Replace(" ", "-")"
                                   @(Model.SelectedCategories != null && Model.SelectedCategories.Contains(category.CategoryName) ? "checked" : "")/>
                            <label class="form-check-label" for="cat-@category.CategoryName.Replace(" ", "-")">
                                @category.CategoryName
                            </label>
                        </div>
                    }
                </div>
            </div>
            
            <div class="filter-section">
                <label class="fw-semibold">
                    <i class="bi bi-shop me-2"></i>
                    Brands
                </label>
                <div id="checkboxListBrands" class="checkbox-list">
                    @foreach (var brand in Model.drinkBrands)
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="SelectedBrandNames" 
                                   value="@brand.BrandName" 
                                   id="brand-@brand.BrandName.Replace(" ", "-")"
                                   @(Model.SelectedBrandNames != null && Model.SelectedBrandNames.Contains(brand.BrandName) ? "checked" : "")/>
                            <label class="form-check-label" for="brand-@brand.BrandName.Replace(" ", "-")">
                                @brand.BrandName
                            </label>
                        </div>
                    }
                </div>
            </div>
            
            <div class="filter-section">
                <label class="fw-semibold">
                    <i class="bi bi-percent me-2"></i>
                    Alcohol Content
                </label>
                <div class="mb-3">
                    <label class="d-flex justify-content-between">
                        <span>Minimum Alcohol</span>
                        <span id="minValueDisplay" class="badge bg-primary">@((Model.MinValue ?? 0).ToString("F1"))%</span>
                    </label>
                    <input name="minValue" id="minValue" type="range" class="form-range" 
                           min="0" max="100" step="0.1" 
                           value="@(Model.MinValue ?? 0)" 
                           oninput="updateSliderValue('minValue')">
                </div>
                <div class="mb-3">
                    <label class="d-flex justify-content-between">
                        <span>Maximum Alcohol</span>
                        <span id="maxValueDisplay" class="badge bg-primary">@((Model.MaxValue ?? 100).ToString("F1"))%</span>
                    </label>
                    <input name="maxValue" id="maxValue" type="range" class="form-range" 
                           min="0" max="100" step="0.1" 
                           value="@(Model.MaxValue ?? 100)" 
                           oninput="updateSliderValue('maxValue')">
                </div>
            </div>

            <div class="filter-section">
                <label for="minStars" class="fw-semibold">
                    <i class="bi bi-star-fill me-2"></i>
                    Rating
                </label>
                <select name="minStars" id="minStars" class="form-select" aria-label="Minimum Stars">
                        @{
                            var selectedStars = Model.MinStars?.ToString() ?? "";
                        }
                        <option value="0" selected="@(selectedStars == "" ? "selected" : null)">Any rating</option>
                        <option value="1" selected="@(selectedStars == "1" ? "selected" : null)">1+ stars</option>
                        <option value="2" selected="@(selectedStars == "2" ? "selected" : null)">2+ stars</option>
                        <option value="3" selected="@(selectedStars == "3" ? "selected" : null)">3+ stars</option>
                        <option value="4" selected="@(selectedStars == "4" ? "selected" : null)">4+ stars</option>
                        <option value="5" selected="@(selectedStars == "5" ? "selected" : null)">5 stars</option>
                </select>
            </div>
            
            <div class="filter-actions">
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary flex-grow-1">
                    <i class="bi bi-x-circle me-1"></i> Clear
                </a>
                <button type="submit" class="btn btn-primary flex-grow-1">
                    <i class="bi bi-funnel-fill me-1"></i> Filter
                </button>
            </div>
        </form>
    </div>
        <div class="col-lg-9">
            <div class="drink-of-day-section text-center">
                <div class="mb-3">
                    <span class="badge bg-primary mb-2">Featured</span>
                    <h2 class="h3">Drink of the Day</h2>
                </div>
                <div class="modern-card mx-auto" style="max-width: 500px;">
                    @await Html.PartialAsync(
                        "~/Views/Drink/DrinkElement.cshtml",
                        new WinUIApp.WebUI.Models.DrinkElementViewModel { Drink = Model.Drink },
                        null
                    )
                </div>
            </div>

            <div class="mb-4">
                <h2 class="h3 mb-4">Explore Drinks</h2>
                <div class="drinks-grid">
                    @foreach (var drink in Model.drinks)
                    {
                        <div class="modern-card mb-4">
                            @await Html.PartialAsync(
                                "~/Views/Drink/DrinkElement.cshtml",
                                new WinUIApp.WebUI.Models.DrinkElementViewModel { Drink = drink },
                                null
                            )
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function updateSliderValue(id) {
        const slider = document.getElementById(id);
        const display = document.getElementById(id + 'Display');
        display.textContent = parseFloat(slider.value).toFixed(1) + '%';
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateSliderValue('minValue');
        updateSliderValue('maxValue');
    });
    }
</script>